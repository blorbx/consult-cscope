#+title: consult-cscope
#+author: Michael Chen
#+language: en

* Overview and Usage
This package provides [[http://cscope.sourceforge.net/][cscope]] support for the
[[https://github.com/minad/consult][consult]] interface for Emacs.
=consult-cscope= runs asynchronously similar to =consult-grep= and provides the
following interactive functions corresponding to each of the search types cscope
can perform:

- =consult-cscope-find-this-symbol=
  Search for all references to this symbol.
- =consult-cscope-find-this-global-definition=
  Search for the global definition of this symbol.
- =consult-cscope-find-called-by-this-function=
  Search for all functions called by this function.
- =consult-cscope-find-calling-this-function=
  Search for all functions calling this function.
- =consult-cscope-find-this-text-string=
  Search for this text string.
- =consult-cscope-find-this-egrep-pattern=
  Search for this egrep pattern.
- =consult-cscope-find-this-file=
  Search for this file.
- =consult-cscope-find-files-including-this-file=
  Search for any files including this file.
- =consult-cscope-find-assignments-to-this-symbol=
  Search for any assignments to this symbol. (only in cscope 15.8+)

Since =consult-cscope=
uses[[https://github.com/minad/consult#asynchronous-search][consult's
asynchronous search]] interface, results can be narrowed using various splitting
styles.

Some examples using the =perl= splitting style:

- =#function=: Search for =function= symbol.
- =#function#filter=: Search for =function= symbol and only show results also
  containing =filter=.
- =#function -- -C=: Pass =-C= flag to cscope to make search case-insensitive.

* Configuration
Basic configuration is done using a few variables:

- =consult-cscope-program=: Path or filename of =cscope= executable. Defaults to
  "cscope", which should be enough if =cscope= is available in your =PATH=.
- =consult-cscope-database-file=: Path or filename of cscope database file. Can
  be an absolute or relative path. Defaults to "cscope.out" which will cause
  =consult-cscope= to look in several locations as detailed in the Database file
  configuration section.
- =consult-cscope-args=: Extra command line arguments for cscope. Defaults to
  "-d", which causes =cscope= to skip building the database file. Don't add "-f"
  or "-L" here as these are used automatically.
- =consult-cscope-use-initial=: When set to =nil= (default), =consult-cscope=
  searches don't provide initial input but add it to the "future history".
  Using a prefix argument before the search adds initial input.  When set to
  =non-nil=, this behavior is reversed and initial input is automatically added
  unless a prefix argument is provided.

** Database File Search Order
=consult-cscope= uses the =consult-cscope-database-file= variable to determine
the location of the cscope database file in the following search order:

1. If =consult-cscope-database-file= is an absolute path, use the path as-is.
2. If =consult-cscope-database-file= is a relative path (e.g. the default
   "cscope.out"), search the current directory.
3. Search the directory returned by the =projectile-project-root= function.

=consult-cscope= assumes a cscope database file has already been built (for
  example with the =cscope -b= terminal command).

** Per-Directory Local Configuration
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html][Per-directory
local variables]] can be used with =consult-cscope= to allow for per-project
configuration of =consult-cscope-program= and =consult-cscope-database-file=.
This can be especially useful when using shared, pre-built cscope database
files.

For example, if you have a project that has a cscope database file in
=~/project/cscope/cscope.out=, you would add a =.dir-locals.el= file in
=~/project/= with the following configuration:

#+begin_src elisp
((nil . ((consult-cscope-database-file "~/project/cscope/cscope.out"))))
#+end_src

Then, any files being edited in or in a subdirectory of =~/project/= will use
this value for =cscope-database-file=.

* Installation
** Manual
Add =consult-cscope.el= to your =load-path= and use =require= or
[[https://github.com/jwiegley/use-package][use-package]].

** [[https://github.com/doomemacs/doomemacs][Doom Emacs]]
=consult-cscope= can be added to Doom Emacs by adding the following to
=~/.doom.d/packages.el=:

#+begin_src elisp
(package! consult-cscope :recipe (:host github :repo "blorbx/consult-cscope"))
#+end_src

** MELPA
This package has not yet been added to MELPA.
